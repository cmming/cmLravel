接口开发的动作请求

GET（SELECT）：从服务器取出资源（一项或多项）。
POST（CREATE）：在服务器新建一个资源。
PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。
PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。
DELETE（DELETE）：从服务器删除资源。



0. php artisan key:generate

1.migration 使用说明

    php artisan make:migration create_tablename_table   (创建一个表格)

    php artisan migrate (执行migrations 文件夹里面 所有的 数据库迁移版本)

    php artisan tinker (用来直接模拟 modal对象的 的数据库操作)
        1.1  $post = new \App\Post();
             $post->title = '';
             $post->content = '';
             $post->user_id = '';

             $post->save();(保存) 或者修改

             $post->find(1);(根据 主键 进行搜索)

             $post::where("key","value")->first(); 找到第一个 数据

             $post::where("key","value")->first()->delete(); 找到第一个并且删除掉。

             factory(App\)


2.Auth 用户登录状态管理类


3.策略类 policy 

    php artisan make:policy PostPolicy


4.从文章模型中 关联 不同的 模型 （项目不断进行下去的思路）

    模型关联 6种
    1-1 belongsTo
    1-？ hasMany
    ？-？

    view 层 当跨越 了多级模型的时候 ，应该使用 模型预加载的 模式进行 预加载


    4.1 评论 模块的添加
        4.1.1 使用 migration 创建 一个 表 php artisan make:migration create_tablename_table

        4.1.2 使用 php artisan migrate 创建 表

        4.1.3 创建评论模块的模型 在评论模型中 进行关联 文章模型 ，在文章模型同样进行 关联 评论（belongsTo）

    4.2 点赞 模块
        4.2.1 使用 migration 创建一个表 php artisan make:migration create_zans_table

        4.2.2 使用 php artisan migrate 创建 表

        4.2.3 

    4.3 添加个人中心 粉丝模块 (关注和粉丝 功能)

        4.3.1 建表
        4.3.2 模型关联



后台的登录管理控制

添加用户 管理页面  admin_users

添加文章的审核 模块 修改 表 添加一个 状态 位 ，用于

添加角色表
    权限表
    关联表->用户和角色的关联 角色和权限的关联

    模型关联

    用户 角色 权限 三者的关联

    1.用户和角色的关系
        a.用户拥有的角色：通过 使用belongsMany ，通过用户与角色的关系表进行关联 ，获取当前用户拥有的权限(列表)
        b.判断一个用户是否拥有一个角色 使用集合的方式（intersect） 进行判断()
        c.为用户添加一个角色 使用  save()  (添加)
        d.为用户删除一个角色 使用 detach() (删除)
        e.判断一个用户是否拥有一个权限 (也就是判断当前权限所属的角色是 否在当前角色中) (用户进行操作的时候判断)

    2.角色与权限的关系
        a.一个角色拥有的所有权限(列表)
        b.为一个角色添加一个权限(添加)
        c.为一个角色删除一个权限(删除)
        d.一个角色是否拥有一个权限(操作的时候有用)

     3.权限与角色的关系
        a.一个权限被那些角色所拥有



    页面的搭建


    使用gate 制作用户的页面权限控制  用户授权

    1.定义门卫
    2.使用门卫
    路由里面使用 middleware=> 'can:system'
    在blade 里面使用 @can('system')
    控制器中的使用 $this->authorize('system',$post)

    a.开始注册gate;
    b.在路由中通过 gate对权限 进行控制 AuthServiceProvider 里面注册 门卫
    c.在blade 中进行权限目录的控制

    专题管理模块

    1.数据库已经有
    2.页面
    3.逻辑
    使用 路由中的资源型 进行自动构建 路由
    资源与控制器 以及动作的对应关系

    资源名称（一般用模型的复数形式命名）   method            url                    ctrMethod
    resources （首页）                    get         resources/index             index
    resources（创建）                     get         resources/create            create
    resources（保存）                     post        resources/store             store
    resources（详情）                     get         resources/{resource}/show        show
    resources（修改页面）                 get         resources/{resource}/edit   edit
    resources（提交更新）                 put/patch   resources/{resource}        update
    resources（删除）                     delete      resources/{resource}        destory



    使用队列的方式 进行对用户进行发送通知

    1.表结构设计 系统通知表 和 用户与通知的关系表
    2.使用手段-> 队列的 同步和异步
    3.异步队列的实现（这里使用 database 作为队列的驱动）

    a 添加用户与通知之间的关联关系 （多对多 belongsToMany）
    b 完成后台的页面
    c 完成队列服务

        c1 驱动
            在config 中的config.php 中进行配置 ；
            穿件队列的表 php artisan queue:table
            创建一个job php artian make:job jobName
        c2 定义任务
            在 job文件夹 对应文件中进行 任务的定义
        c3 分发任务
            在控制器空进行 任务的分发 (这里在 添加 通知的时候 默认发个每一个用户) 使用 dispatch
        c4 启动队列 php artisan
            使用命令 将队列开启
        c5 系统队列的实现






